buildscript {
  dependencies {
    classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.4.RELEASE'
    classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '3.0'
    classpath group: 'net.serenity-bdd', name: 'serenity-gradle-plugin', version: '2.2.0'
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'com.github.ben-manes.versions' version '0.36.0'
  id 'info.solidsoft.pitest' version '1.5.1'
  id "io.franzbecker.gradle-lombok" version "4.0.0"
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'jacoco'
  id 'net.ltgt.apt' version '0.21'
  id 'org.owasp.dependencycheck' version '6.0.2'
  id 'org.sonarqube' version '3.0'
  id 'org.springframework.boot' version '2.3.4.RELEASE'
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.finrem'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.finrem.notifications.NotificationApplication'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
}

sourceSets {
  testSmoke {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  test {
    java.srcDir 'src/test/java'
    resources.srcDir 'src/test/resources'
  }

  functional {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDirs = ['src/functionalTests/java']
    }
    resources {
      srcDirs = ['src/functionalTests/resources']
    }
  }
}

configurations {
  functionalImplementation.extendsFrom testImplementation
  functionalRuntime.extendsFrom testRuntime
}

def versions = [
        commonsBeanUtils        : '1.9.4',
        commonsLang3            : '3.10',
        commonsIo               : '2.7',
        hmctsNotify             : '3.15.1-RELEASE',
        jsonAssert              : '1.5.0',
        junit                   : '4.13',
        lombok                  : '1.18.12',
        reformHealth            : '0.0.5',
        reformLogging           : '5.1.6',
        reformPropertiesVolume  : '0.0.4',
        restAssured             : '3.0.3',
        serenity                : '2.2.10',
        serenityCucumber        : '1.9.51',
        serviceTokenGenerator   : '3.1.2',
        springfoxSwagger        : '2.9.2',
        springRetry             : '1.3.0',
        tomcat                  : '9.0.40',
        wiremockVersion         : '2.27.1'
]

dependencyManagement {
  dependencies {
    // CVE-2019-10086
    dependency group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils
    // CVE-2019-17563, CVE-2020-9484
    dependencySet(
            group: 'org.apache.tomcat.embed', version: versions.tomcat
    ) {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }
    // CVE-2020-8908
    dependency group: 'com.google.guava', name: 'guava', version: '30.1-jre'

  }
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("org.springframework.boot:spring-boot-configuration-processor")
  implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.retry', name: 'spring-retry', version: versions.springRetry
  implementation group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils

  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: versions.hmctsNotify
  implementation group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealth
  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
  implementation('org.apache.httpcomponents:httpclient:4.5.13') {
    because 'Apache HttpClient versions prior to version 4.5.13 can misinterpret malformed authority component in ' +
            'request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.'
  }
  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: versions.wiremockVersion

  testSmokeImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  testSmokeImplementation sourceSets.main.runtimeClasspath
  testSmokeImplementation sourceSets.test.runtimeClasspath

  functionalImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  functionalImplementation group: 'junit', name: 'junit', version: versions.junit
  functionalImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  functionalImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  functionalImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  functionalImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  functionalImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
  functionalImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
  functionalImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalImplementation group: 'org.skyscreamer', name: 'jsonassert', version: versions.jsonAssert
  functionalImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  functionalImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  functionalImplementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

def sonarExclusions = [
        '**/uk/gov/hmcts/reform/finrem/notifications/config/**',
        '**/uk/gov/hmcts/reform/finrem/notifications/domain/**',
        '**/uk/gov/hmcts/reform/finrem/notifications/NotificationApplication'
]

sonarqube {
  properties {
    property "sonar.exclusions", sonarExclusions.join(', ')
    property "sonar.projectKey", "finrem-notification-service"
    property "sonar.dynamicAnalysis", "reuseReports"
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

checkstyle.toolVersion = '8.32'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

jacocoTestReport {
  executionData(test)

  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.8
      }
    }
  }
}

pitest {
  targetClasses.set( ['uk.gov.hmcts.reform.finrem.notifications.*'])
  excludedClasses.set( ['uk.gov.hmcts.reform.finrem.notifications.NotificationApplication',
                     'uk.gov.hmcts.reform.finrem.notifications.model.*',
                     'uk.gov.hmcts.reform.finrem.notifications.config.*',
                     'uk.gov.hmcts.reform.finrem.notifications.domain.*'])
  threads.set(4)
  outputFormats.set(['XML', 'HTML'])
  timestampedReports.set(false)
  mutationThreshold.set(80)
}

compileJava.dependsOn(processResources)
build.dependsOn jacocoTestReport

bootJar {
  manifest {
    attributes 'Implementation-Title': project.name,
            'Implementation-Version': project.version
  }
  archiveFileName = 'finrem-notification-service.jar'
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.testSmoke.output.classesDirs
  classpath = sourceSets.testSmoke.runtimeClasspath
  finalizedBy aggregate
}

task functional(type: Test) {
  description = "Runs functional Tests"
  setTestClassesDirs(sourceSets.functional.output.classesDirs)
  setClasspath(sourceSets.functional.runtimeClasspath)
  finalizedBy aggregate
}

project.tasks['sonarqube'].dependsOn test, jacocoTestReport