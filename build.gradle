buildscript {
  ext {
    springBootVersion = '2.0.3.RELEASE'
  }
  repositories {
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.6.2'
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'net.ltgt.apt' version '0.10'
  id 'io.franzbecker.gradle-lombok' version '1.14'
  id 'org.owasp.dependencycheck' version '3.2.1'
  id 'pmd'
  id 'jacoco'
  id 'org.sonarqube' version '2.6.2'

}


apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'

group = 'uk.gov.hmcts.reform.finrem'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
  mavenLocal()
  jcenter()

  maven { url 'https://artifactory.reform.hmcts.net/artifactory/libs-release' }
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
  maven { url "http://repo.maven.apache.org/maven2" }
}

sourceSets {
  test {
    java.srcDir 'src/test/java'
  }
}

def versions = [
        lombokVersion: '1.18.0',
        hmctsNotify: '3.8.0-RELEASE'
]

mainClassName = 'uk.gov.hmcts.reform.finrem.notifications.NotificationApplication'

dependencies {
  compile('org.springframework.boot:spring-boot-starter-web')
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-configuration-processor")
  compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
  compile group: 'org.projectlombok', name: 'lombok', version:versions.lombokVersion
  apt group: 'org.projectlombok', name: 'lombok', version:versions.lombokVersion
  compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: versions.hmctsNotify

  testCompile('org.springframework.boot:spring-boot-starter-test')
}

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation'
}

jar {
    enabled = true
    archiveName 'finrem-notification-service.jar'
    manifest {
    attributes('Implementation-Title': project.name,
            'Implementation-Version': project.version)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
}

sonarqube {
  println "echo sonarqube"
  properties {
    property "sonar.exclusions", "**/finrem/notifications/domain/**, **/finrem/notifications/exception/**, **/finrem/notifications/health/**, **/finrem/notifications/NotificationApplication.java"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
    property "sonar.dynamicAnalysis", "reuseReports"
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
  }
}


check.dependsOn dependencyCheckAnalyze

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.finrem.notifications.category.SmokeTest'
  }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
}


task integrationTest(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.7'
  configDir = new File(rootDir, 'config/checkstyle')
}

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

bootRun {
  systemProperty 'server.port', '8086'
}

jacocoTestReport {
  executionData(test)

  reports {
    xml {
      enabled true
    }

    html {
      enabled true
    }
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.8
      }
    }
  }
}

sonarqube {
  properties {
    property "sonar.exclusions", "**/finrem/notifications/domain/**, **/finrem/notifications/exception/**, **/finrem/notifications/health/**, */finrem/notifications/NotificationApplication.java"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco.exec"
    property "sonar.projectKey", "FINREM_NOTIFICATION_SERVICE"
    property "sonar.projectName", "Financial Remedy Notification Service"
  }
}

